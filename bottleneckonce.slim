// set up a simple neutral simulation
initialize() {
defineConstant("seed",getSeed());
	initializeMutationRate(1e-7);

	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", benedom, "f", benesc);
	m2.convertToSubstitution=F;
	initializeMutationType("m3", deledom, "f", delesc);
	m3.convertToSubstitution=F;
	// g1 genomic element type: uses m1 for all mutations
	initializeMutationType("m4",0.5,"f",0.0);
	initializeMutationType("m5",0.5,"f",0.0);
	initializeGenomicElementType("g1", m1, 1.0);	initializeGenomicElementType("g2",c(m1,m2,m3,m4,m5),c(fneu*(1-a),fpos*(1-a),fdel*(1-a),(a/2),(a/2)));
	if(coordfile=='none'){
	
		initializeGenomicElement(g1, 0, 19999);
initializeGenomicElement(g2,20000,39999);
	initializeGenomicElement(g1,40000,49999);
	}
	else{
	map=readFile(coordfile);
	startpos=NULL;
	endpos=NULL;
	for(line in map){
	components=strsplit(line,"\t");
	start=c(coords,asInteger(components[1]));
	end=c(coords,asInteger(components[2]));
	
	genetype=c(coords,asInteger(components[0]));
	
	if (genetype=='intron')
	initializeGenomicElement('g1',start,end);
	if (genetype=='exon')
	initializeGenomicElement('g2',start,end);
	
	}
	}
	
	initializeSex("A");
	// uniform chromosome of length 100 kb with uniform recombination
if (recmap=='none'){
initializeRecombinationRate(1e-8);
}
else{
	recmap=readFile(recmap);
	ends=NULL;
	rates=NULL;
	for(lines in recmap){
	components=strsplit(line,'\t');
	ends=c(ends,asInteger(components[0]));
	rates=c(rates,asFloat(components[1]));
	}
initializeRecombinationRate(rates,ends);
}
}
1 early() {
	sim.addSubpop("p1",N,0.5);	females=p1.individuals[p1.individuals.sex=='F'];
males=p1.individuals[p1.individuals.sex=='M'];
}
burnin+1: early(){
p1.setSubpopulationSize(necksize);
sim.mutationsOfType(m4).setValue("dom",runif(1,0.5,1));
sim.mutationsOfType(m4).setSelectionCoeff(sasc);
sim.mutationsOfType(m5).setValue("dom",runif(1,0.5,1));
sim.mutationsOfType(m5).setSelectionCoeff(-sasc);
}
mutationEffect(m4) {
if(community.tick<burnin){
return 1.0;}
else{
	if(individual.sex=='F')
	return effect;
	else
	return 1/effect;
	}
}
mutationEffect(m5) {
if(community.tick<burnin){
return 1.0;}
else{
return individual.sex=='M' ? 1/effect else effect;
}
}

2000 late(){
sim.subpopulations.genomes.outputVCF(filePath="bottleneck_1"+"startpop_"+N+"necksize_"+necksize+"sasc_"+sasc+"seed_"+seed+".vcf");
sim.outputFixedMutations();
inds=p1.individuals;
for(ind in inds){
cat("ID: "+ind.index+", sex, "+ind.sex+"\n");
cat("\n");
}
sim.simulationFinished();
}
